package geomesa.core.process.knn

import com.vividsolutions.jts.geom.{Point, Geometry}
import geomesa.utils.geotools.Conversions.RichSimpleFeature
import org.opengis.feature.simple.SimpleFeature

import scala.collection.mutable
/**
object DistanceHelpers4SF{
  implicit class DistributedSimpleFeature(val sf: SimpleFeature) extends Ordered[SimpleFeature] {
    val geom: Geometry = ???
    def compare(that: SimpleFeature) =  this.distanceFrom(geom) - that.distanceFrom
    def distanceFrom(geom: Geometry) =  geom.distance(sf.geometry)
  }
}
**/
trait PQBounds extends mutable.PriorityQueue {
  def numDesired: Int
  def foundK: Boolean = !(length < numDesired)
  def getLast = take(numDesired).lastOption
  def maxDistance = getLast.map { sf => distanceCalc(sf.geometry)}
}


object OrderedSF {
  //def orderedSF: Ordering[SimpleFeature] = Ordering.by { sf: SimpleFeature => distanceCalc(sf.geometry)}.reverse
  def apply(aFeatureForSearch: SimpleFeature) = {
    def distanceCalc(geom: Geometry) = aFeatureForSearch.point.distance(geom)
    def orderedSF: Ordering[SimpleFeature] = Ordering.by { sf: SimpleFeature => distanceCalc(sf.geometry)}.reverse
    new mutable.PriorityQueue[SimpleFeature]()(orderedSF)
  }
}
