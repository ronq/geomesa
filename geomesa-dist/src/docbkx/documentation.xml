<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2013 Commonwealth Computer Research, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE text [ <!ENTITY mdash "&#x2014;"> <!ENTITY hellip "&#x2026;"> ]>

<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
         xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>GeoMesa: Getting Started</title>
    <subtitle>pertaining to version <?eval ${project.version}?> of the API
    </subtitle>

    <section>
        <title>Overview</title>

        <para>The purpose of
            <code>GeoMesa</code>
            is to provide developers an API to
            store large volumes of spatio-temporal data in a Accumulo NoSQL
            database so that those data may be queried efficiently. The library
            largely follows conventions established by the
            <link xlink:href="http://geotools.org/">GeoTools</link>
            library.
        </para>

        <para>The remainder of this document is organized by task:</para>

        <itemizedlist>
            <listitem>
                <para>installation and configuration</para>
            </listitem>
            <listitem>
                <para>creating a
                    <code>DataStore</code>
                </para>
            </listitem>
            <listitem>
                <para>searching for features</para>
            </listitem>
            <listitem>
                <para>creating a
                    <code>SimpleFeature</code>
                </para>
            </listitem>
            <listitem>
                <para>writing features</para>
            </listitem>
            <listitem>
                <para>ingesting Shapefiles</para>
            </listitem>
        </itemizedlist>

    </section>

    <section>
        <title>Installation and Configuration</title>

        <para>These are the main categories of use, each of which has specific
            installation instructions: allowing Accumulo to see the
            GeoMesa library; enabling GeoMesa support within
            GeoServer; preparing to write, compile, and run new Java code using
            the GeoMesa API.
        </para>

        <para>The prerequisite to all of these tasks is having downloaded and
            unpacked the distribution tar-ball,<code>
                geomesa-dist-<?eval ${project.version}?>
                -distribution.tar.gz</code>.
        </para>

        <section>
            <title>Updating Accumulo Libraries</title>

            <para>Copy everything from the unpacked
                <code>accumulo/lib/ext</code>
                directory to the
                <code>${ACCUMULO_HOME}/lib/ext</code>
                directory on every tablet-server within your Accumulo
                installation.
            </para>

            <para>It should not be necessary to restart either the tablet
                servers or Accumulo itself; the libraries should be
                automatically detected and enabled. We have confirmed that this
                works with version 1.5.1 of Accumulo.
            </para>
        </section>

        <section>
            <title>Enabling GeoMesa support within GeoServer</title>
            
            <para>GeoMesa includes a plugin for GeoServer that is compatible and tested
                  with the 2.5.x GeoServer line. Follow the steps below to enable GeoMesa support within GeoServer:
            </para>

            <formalpara><title>Step 1: Unpackage the GeoMesa tarball</title>
                <para>After building GeoMesa locate the distribution tarball and decompress it to a temporary directory:
                    <programlisting language="bash"><![CDATA[tar xvf geomesa-dist-accumulo1.5-1.0.0-SNAPSHOT-distribution.tar.gz]]></programlisting>
                </para>
            </formalpara>

            <formalpara><title>Step 2: Deploy the GeoMesa plugin</title>
                <para>Copy the GeoMesa plugin from the lib directory to the GeoServer lib directory:
                    <programlisting language="bash"><![CDATA[cp geoserver/WEB-INF/lib/geomesa-plugin-accumulo1.5-1.0.0-SNAPSHOT-geoserver-plugin.jar \
    ${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/lib]]></programlisting>
                </para>
            </formalpara>

            <formalpara><title>Step 3: Deploy dependencies</title>
                <para>
                    GeoMesa needs several dependencies at runtime within GeoServer:
                    <programlisting language="bash"><![CDATA[accumulo-core
accumulo-trace
accumulo-fate
zookeeper
libthrift
hadoop-common
hadoop-mapreduce-client-core
commons-configuration
commons-vfs2]]></programlisting>
                        These are support services that are referenced by GeoMesa, yet are part of your 
                        base infrastructure. Use the most recent versions found in the distribution tarball.
                        To deploy them simply copy them into your lib directory for the GeoServer webapp:
                    <programlisting language="bash"><![CDATA[cp dev/lib/<jar-name> ${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/lib]]]></programlisting>
                </para>
            </formalpara>

            <formalpara><title>Step 4: Upgrade shared dependencies</title>
                <para>
                    GeoMesa currently shares logging and codec libraries with GeoServer but uses newer versions:
<programlisting language="bash"><![CDATA[commons-logging
commons-codec
slf4j*]]></programlisting>
                    Previous versions of these libraries need to be removed from the GeoServer classpath and new versions
                    should be deployed: Whenever upgrading libraries, always keep a backup copy and then deploy
                    new dependencies (example for GeoServer 2.5.1):
                    <programlisting language="bash"><![CDATA[# backup old libraries
cd ${GEOSERVER_HOME}
cp lib/slf4j-simple-1.0.1.jar /tmp/backup/
cp lib/commons-logging-1.0.jar /tmp/backup/
cp webapps/geoserver/WEB-INF/lib/commons-codec-1.2.jar /tmp/backup/

# deploy new libraries
cd ${GEOMESA_DIST}
cp dev/lib/commons-logging-1.1.1.jar ${GEOSERVER_HOME}/lib/
cp dev/lib/commons-codec-1.8.jar ${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/lib/]]></programlisting>
                    </para>
            </formalpara>
        </section>

        <section>
            <title>Preparing for Development</title>

            <para>Ensure that everything from the unpacked dev directory is on
                your Java classpath. These libraries will all be needed when
                developing new applications that use GeoMesa.
            </para>
        </section>
    </section>

    <section>
        <title>Creating a
            <code>DataStore</code>
        </title>

        <para>The general model for working with spatial features is well
            described in the GeoTools<link
                    xlink:href="http://docs.geotools.org/latest/userguide/library/data/featuresource.html">
                documentation</link>. The high-level ideas are these:
        </para>

        <itemizedlist>
            <listitem>
                <para>GeoTools organizes geospatial data into features. A
                    feature might be a single point, line, polygon, etc. Each
                    feature can have additional attributes beyond its geometry,
                    such as a name, a price, a date, &hellip;
                </para>
            </listitem>
            <listitem>
                <para>Features that share a description &mdash; a collection of
                    attributes, each of which is named and typed &mdash;
                    constitute a
                    feature-type.
                </para>
            </listitem>
            <listitem>
                <para>A DataStore is an object responsible for a single
                    repository that may contain multiple feature types. To
                    encourage generality, GeoTools provides a DataStoreFinder
                    that can return (or create) a DataStore that is appropriate
                    for a given set of parameters. We will describe the
                    parameters required to fetch a AccumuloDataStore later.
                </para>
            </listitem>
            <listitem>
                <para>The FeatureSource and FeatureStore objects are handed down
                    from the DataStore, and are specific to a single feature
                    type. The FeatureSource (generally) provides a read-only
                    query mechanism, and the FeatureStore allows for writing
                    features back to the DataStore.
                </para>
            </listitem>
        </itemizedlist>

        <para>To fetch a data store, the
            <code>DataStoreFinder</code>
            expects a
            <code>Map&lt;String,String&gt;</code>
            that contains these properties (all are required unless explicitly
            stated otherwise):
        </para>

        <orderedlist>
            <listitem>
                <para><code>instanceId</code>: this is the name of your
                    Accumulo instance
                </para>
            </listitem>
            <listitem>
                <para><code>zookeepers</code>: this is a comma-separated list of
                    host:port pairs; for example, &quot;zoo1:2181,zoo2:2181,zoo3:2181&quot;
                </para>
            </listitem>
            <listitem>
                <para><code>user</code>: this is a Accumulo user that can at
                    least read, write, and create tables
                </para>
            </listitem>
            <listitem>
                <para><code>password</code>: this is the Accumulo user’s
                    password
                </para>
            </listitem>
            <listitem>
                <para><code>auths</code>: these are the cell-level
                    authorizations that should be used with feature data;
                    these should be expressed as comma-separated lists of
                    values such as &quot;A,B,C&quot;
                </para>
            </listitem>
            <listitem>
                <para><code>tableName</code>: each
                    <code>DataStore</code>
                    is tied to a specific table within Accumulo, though the
                    same data store/table can host multiple feature types.
                    This table will be created, and initialized, if it does
                    not already exist. Best practice is not to create this
                    table yourself.
                </para>
            </listitem>
            <listitem>
                <para><code>useMock</code>: [optional; defaults to &quot;false&quot;]
                    when set to &quot;true&quot;, this option causes the data
                    store to operate against a local, MockAccumulo instance
                    instead of the real Accumulo instance; useful for testing
                </para>
            </listitem>
        </orderedlist>

        <para>Sample Java code to fetch a data store:</para>

        <programlisting language="java"><![CDATA[public DataStore createDataStore() throws IOException {
  // build the map of parameters
  Map<String,Serializable> params = new HashMap<String,Serializable>();
  params.put("instanceId", "yourcloud");
  params.put("zookeepers" , "zoo1:2181,zoo2:2181,zoo3:2181");
  params.put("user","youruser");
  params.put("password","yourpwd");
  params.put("auths","A,B,C");
  params.put("tableName","testwrite");

  // fetch the data store from the finder
  return DataStoreFinder.getDataStore(params);
}]]></programlisting>

    </section>

    <section>
        <title>Searching for Features</title>

        <para>Sample Java code to query all features of a given type from a
            <code>AccumuloDataStore</code>:
        </para>

        <programlisting language="java"><![CDATA[public FeatureIterator queryTest() throws IOException {
  // assume we have previously stored a feature type we called "Product"
  String featureName = "Product";

  // fetch the data store, and use it to get a feature source
  DataStore dataStore = createDataStore();
  FeatureSource featureSource =
    dataStore.getFeatureSource(featureName);

  // submit the "get everything" query, and accept a results iterator
  return featureSource.getFeatures().features();
}]]></programlisting>

        <caution>
            <para>Remember that the FeatureIterator must be closed once it is no
                longer needed!
            </para>
        </caution>

        <para>Adding selection criteria to a query is a bit more complicated,
            and involves constructing a Filter for the DataStore. The most
            approachable method is to use
            <link xlink:href="http://docs.geotools.org/latest/userguide/library/cql/ecql.html">
                ECQL
            </link>
            and its utilities to create a Filter from the text representation of
            the filter criteria you wish to use. That is what we do in the
            following example.
        </para>

        <para>Sample Java code that queries features within a target geometry
            and date range:
        </para>

        <programlisting language="java"><![CDATA[public FeatureIterator queryTestFiltered(String featureName)
  throws IOException, CQLException {

// fetch the data store, and use it to get a feature source
DataStore dataStore = createDataStore();
  FeatureSource featureSource =
    dataStore.getFeatureSource(featureName);

  // construct a filter that uses both geography and time
  String bbox = "BBOX(geom, -78.0, 38.2, -77.3, 39.1)";
  String period = "( NOT ( dtg AFTER 2012-12-31T23:59:59Z))" +
                  " AND ( NOT ( dtg BEFORE 2012-01-01T00:00:00Z))";
  Filter cqlFilter = ECQL.toFilter(bbox + " AND " + period);
  Query query = new Query(featureName, cqlFilter);

  // submit the filtered query, and accept a results iterator
  return featureSource.getFeatures(query).features();
}]]></programlisting>

        <para>Note that fields such as
            <code>geom</code> and <code>dtg</code> are used in GeoMesa's spatio-temporal index scheme, in addition
            to being simple feature attributes in their own right. The selection of the fields for the indexing is done in this fashion:
         <itemizedlist>
            <listitem>
                <para>
                    Geometry: Select a field whose name is
                    preceded by an asterisk, or failing that, the first geometry field described in the <code>SimpleFeatureType</code>,
                    as the default geometry field. This field must always
                    have a non-<code>NULL</code> value expressed in terms
                    of SRID 4326
                </para>
            </listitem>
            <listitem>
                <para>
                    Time (Optional): Select a field whose name is taken from the map obtained using the method
                    <code>getUserData()</code> on the <code>SimpleFeatureType</code>. In this map,
                    the key <code>Constants.SF_PROPERTY_START_TIME </code> points to the
                    relevant name. If no value is found, the first <code>Date</code> field found in the
                    <code>SimpleFeatureType</code> itself is selected.
                </para>
            </listitem>
         </itemizedlist>
        </para>


    </section>

    <section>
        <title>Creating a
            <code>SimpleFeature</code>
        </title>

        <para>All data stored in tables managed by GeoMesa takes the form
            of a feature. There are two steps that are part of creating new
            feature data:
        </para>

        <orderedlist>
            <listitem>
                <para>The destination table must know about the<code>
                    FeatureType</code>; that is, you must have explicitly
                    created the type that will be applied to new features. This
                    is metadata. This is done exactly once per feature type
                    (entity).
                </para>
            </listitem>
            <listitem>
                <para>The new features themselves must be instantiated so that
                    they can be written to the table. This is done multiple
                    times, once per entry.
                </para>
            </listitem>
        </orderedlist>

        <para>Sample Java code that creates a new feature type:</para>

        <programlisting language="java"><![CDATA[public SimpleFeatureType createFeatureType(DataStore dataStore)
  throws IOException, SchemaException {

  // name of the feature to create
  String featureName = "Product";

  // create the feature-type (a "schema" in GeoTools parlance)
  // (will also create the Accumulo table, if it does not already exist)
  String featureSchema =
    "NAME:String,SKU:java.lang.Long,COST:Double,SELL_BY:Date," +
    IndexEntryType.getTypeSpec();  // built-in GeoMesa attributes
  SimpleFeatureType featureType = DataUtilities.createType(featureName,
    featureSchema);
  featureType.getUserData().put(Constants.SF_PROPERTY_START_TIME, "dtg");
  dataStore.createSchema(featureType);

  return featureType;
}]]></programlisting>

        <para>Sample Java code that creates a new feature of the
            previously-defined type:
        </para>

        <para>A word on identifiers: GeoTools presupposes that
            there is a unique field per <code>FeatureType</code>.
            Though the system can generate a surrogate ID, it is
            typically more useful to take advantage of the domain
            to suggest a naturally identifying field.  Though it
            will not hurt the storage engine to have IDs that are
            reused across Features, it will limit your ability
            to recall any given feature by ID. In the preceding
            example, <code>SKU</code> is used as a field that
            is separate from the identifier.
        </para>

        <programlisting language="java"><![CDATA[public SimpleFeature createFeature(String featureName, DataStore dataStore)
  throws IOException, ParseException {

  // fetch the feature-type corresponding to this name
  SimpleFeatureType featureType = dataStore.getSchema(featureName);

  // create the feature
  Object[] noValues = {};
  SimpleFeature newFeature = SimpleFeatureBuilder.build(featureType,
    noValues, "SomeNewProductID");

  // initialize a few fields
  // the first three attributes' names are taken from Constants.TYPE_SPEC
  newFeature.setDefaultGeometry((new WKTReader()).read("POINT(45.0 49.0)"));
  newFeature.setAttribute("dtg", new Date());
  newFeature.setAttribute("dtg_end_time", new Date());
  newFeature.setAttribute("NAME", "New Product Name");
  newFeature.setAttribute("SKU", "011235813");
  newFeature.setAttribute("COST", 1.23);
  newFeature.setAttribute("SELL_BY", new Date());

  return newFeature;
}]]></programlisting>

    </section>

    <section>
        <title>Writing Features</title>

        <para>The
            <code>FeatureStore</code>
            is responsible for writing features out to the managed table.
            Typically, you would ask for a
            <code>FeatureStore</code>
            when you intended to write features out one at a time.
        </para>

        <para>Sample Java code that writes a new object out to its indexed
            Accumulo table:
        </para>

        <programlisting language="java"><![CDATA[public void writeFeature(String featureName, SimpleFeature feature,
                             DataStore dataStore)
  throws Exception {

  // get a feature store
  FeatureSource featureSource = dataStore.getFeatureSource(featureName);
  if (!(featureSource instanceof FeatureStore))
    throw new Exception("Could not retrieve feature store");
  FeatureStore featureStore = (FeatureStore)featureSource;

  // preserve the ID that we created for this feature
  // (set the hint to FALSE to have GeoTools generate IDs)
  feature.getUserData().put(Hints.USE_PROVIDED_FID, java.lang.Boolean.TRUE);

  // create a feature collection
  DefaultFeatureCollection features = new DefaultFeatureCollection();
  features.add(feature);

  // write this feature collection to the store
  featureStore.addFeatures(features);
}]]></programlisting>

    </section>

    <section>
        <title>Ingesting Shapefiles</title>

        <para>GeoMesa has routines that will transfer the contents &mdash;
            the
            metadata concerning types as well as the geographic entities &mdash;
            of a
            Shapefile into a GeoMesa-managed table.
        </para>

        <para>Sample Java code that writes a new object out to its indexed
            Accumulo table:
        </para>

        <programlisting language="java"><![CDATA[public void ingestShapefile(String shapefileName, String featureName)
  throws IOException {

  // fetch a data store
  DataStore dataStore = createDataStore();

  // delegate this work
  ShapefileIngest.ingestShapefile(shapefileName, dataStore, featureName);
}]]></programlisting>

        <para>For relatively small feature collections &mdash; fewer than about
            one
            thousand items &mdash; ingest will write the entries directly to the
            Accumulo table. For larger collections, ingest will defer to a
            map/reduce job to organize the features for insertion. The next
            section describes how to configure GeoMesa to run in a
            map/reduce context.
        </para>

        <section>
            <title>Configuring GeoMesa for Map-Reduce</title>

            <para>Some of the GeoMesa services, such as ingesting
                Shapefiles, may require support for map-reduce jobs. The
                GeoMesa map/reduce classes are packaged into JAR files
                within the expanded
                <code>hdfs</code>
                directory inside the distribution tar-ball. By default,
                GeoMesa will look for these JAR files within HDFS in the
                <code>/geomesa/lib</code>
                directory. Either copy the JARs to that directory within HDFS,
                or follow these steps to customize the location where
                GeoMesa will search for these classes:
            </para>

            <orderedlist>
                <listitem>
                    <para>create a new, blank XML file called
                        <code>geomesa-site.xml</code>
                        somewhere on your Java classpath
                        <footnote>
                            <para>It is possible to add entries to an existing
                                Hadoop configuration file such as
                                <filename>core-site.xml</filename>, but it is
                                probably simpler
                                to manage these custom properties if they remain
                                in
                                their own, separate file.
                            </para>
                        </footnote>
                    </para>
                </listitem>
                <listitem>
                    <para>Add the following content to this new file:</para>
                    <programlisting language="xml"><![CDATA[<configuration>
  <property>
    <name>instance.geo.dfs.dir</name>
    <value>/your/lib/directory</value>
  </property>
</configuration>]]></programlisting>
                </listitem>
                <listitem>
                    <para>Re-run your Java application, being sure to pass in
                        the following property:
                        <code>
                            -Dgeomesa.config.file=/your/path/geomesa-site.xml
                        </code>
                    </para>
                </listitem>
                <listitem>
                    <para>If you receive a warning about the configuration file
                        not being available, then it is likely that one of these
                        issues exists:
                    </para>
                    <orderedlist>
                        <listitem>
                            <para>the name of the file you specified in the Java
                                property at run-time was not the same as the
                                path, name of the configuration file you
                                created;
                            </para>
                        </listitem>
                        <listitem>
                            <para>the name of the file you specified is not
                                accessible on the Java classpath;
                            </para>
                        </listitem>
                        <listitem>
                            <para>there are file, directory permission
                                conflicts
                            </para>
                        </listitem>
                    </orderedlist>
                </listitem>
            </orderedlist>
        </section>

    </section>

</article>
